import { test, expect } from '@playwright/test';

test.describe('Complete Poem Workflow with Image Generation and Export', () => {
  test.beforeEach(async ({ page }) => {
    // Run in headless mode as per CLAUDE.md
    await page.goto('/w/poem/new');
    await page.waitForLoadState('networkidle');
  });

  test('should complete full poem workflow: topic → poem → image → HTML export', async ({ page }) => {
    console.log('Starting complete poem workflow test...');
    
    // Step 1: Enter poem topic
    console.log('Step 1: Entering poem topic');
    const poemTopic = 'A majestic waterfall in a tropical paradise';
    await page.locator('textarea').first().fill(poemTopic);
    
    // Click continue using specific stage ID
    await page.locator('#process-stage-poem-topic').click();
    
    // Step 2: Wait for poem generation
    console.log('Step 2: Waiting for poem generation...');
    await page.waitForSelector('text=Poem Title', { timeout: 60000 });
    await page.waitForSelector('text=Poem Content', { timeout: 10000 });
    
    // Verify poem was generated by checking for the labels
    const poemTitleLabel = await page.locator('text=Poem Title').isVisible();
    expect(poemTitleLabel).toBe(true);
    
    const poemContentLabel = await page.locator('text=Poem Content').isVisible();
    expect(poemContentLabel).toBe(true);
    
    // Get the actual poem text for verification
    const pageContent = await page.textContent('body');
    expect(pageContent).toContain('Poem Title');
    expect(pageContent).toContain('Poem Content');
    console.log('✓ Poem generated successfully');
    
    // Step 3: Fill image briefing form
    console.log('Step 3: Filling image briefing form');
    await page.waitForSelector('text=Image Customization', { timeout: 10000 });
    
    // Add optional instructions - find the textarea by looking for the one after "Additional Image Instructions"
    const imageInstructions = page.locator('textarea').filter({ hasText: '' }).nth(1); // Second empty textarea
    await imageInstructions.fill('Vibrant colors, mist from the waterfall, tropical birds');
    
    // Use default settings for other fields (aspect ratio: 3:4, style: Artistic, number: 2)
    
    // Click continue for image briefing - find the continue button in the image customization section
    const imageContinueButton = page.locator('button:has-text("Continue")').first();
    await imageContinueButton.click();
    console.log('✓ Image briefing submitted');
    
    // Step 4: Wait for image generation
    console.log('Step 4: Waiting for image generation...');
    
    // Wait for the image generation stage to appear
    await page.waitForSelector('[data-testid="stage-card-generate-poem-image"]', {
      timeout: 30000
    });
    
    // Wait for images to be generated - look for img elements
    await page.waitForSelector('[data-testid="stage-card-generate-poem-image"] img', {
      timeout: 120000 // 2 minutes for image generation
    });
    
    console.log('✓ Images generated');
    
    // Verify at least one image is visible
    const generatedImages = page.locator('[data-testid="stage-card-generate-poem-image"] img');
    const imageCount = await generatedImages.count();
    expect(imageCount).toBeGreaterThan(0);
    console.log(`✓ Found ${imageCount} generated images`);
    
    // Get the first image URL for later verification
    const firstImageUrl = await generatedImages.first().getAttribute('src');
    expect(firstImageUrl).toBeTruthy();
    
    // Check if it's a valid image URL (data URL or storage URL)
    const isValidUrl = firstImageUrl?.startsWith('data:image/') || 
                      firstImageUrl?.includes('storage.googleapis.com') ||
                      firstImageUrl?.includes('firebasestorage.googleapis.com');
    expect(isValidUrl).toBe(true);
    console.log('✓ Image URL is valid:', isValidUrl ? 'Yes' : 'No');
    
    // Step 5: Verify HTML generation includes the image
    console.log('Step 5: Checking HTML generation...');
    
    // Wait for HTML preview stage
    await page.waitForSelector('[data-testid="stage-card-generate-html-preview"]', {
      timeout: 60000
    });
    
    // Check if we need to run the HTML generation manually
    const runAIButton = page.locator('button:has-text("Run AI")');
    if (await runAIButton.isVisible()) {
      console.log('Clicking Run AI button for HTML generation');
      await runAIButton.click();
    }
    
    // Wait for HTML content to be generated - look for any content in the stage
    await page.waitForSelector('[data-testid="stage-card-generate-html-preview"] [class*="prose"], [data-testid="stage-card-generate-html-preview"] iframe, [data-testid="stage-card-generate-html-preview"] pre', {
      timeout: 60000
    });
    
    console.log('✓ HTML preview generated');
    
    // Check if the HTML contains the image
    const htmlContent = page.locator('[data-testid="stage-card-generate-html-preview"]');
    const htmlText = await htmlContent.textContent();
    
    // The HTML should reference our generated image
    if (firstImageUrl?.startsWith('data:image/')) {
      // For data URLs, just check that an image tag exists
      const hasImageTag = htmlText?.includes('img') || htmlText?.includes('image');
      expect(hasImageTag).toBe(true);
    }
    
    console.log('✓ HTML contains image reference');
    
    // Step 6: Verify export options are available
    console.log('Step 6: Checking export options...');
    
    // Look for export stage
    const exportStage = page.locator('[data-testid*="export"], button:has-text("Export & Publish")');
    const exportExists = await exportStage.count() > 0;
    
    if (exportExists) {
      console.log('✓ Export options available');
      
      // Click on export if not already expanded
      const exportButton = page.locator('button:has-text("Export & Publish")').first();
      if (await exportButton.isVisible()) {
        await exportButton.click();
        await page.waitForTimeout(1000); // Wait for animation
      }
      
      // Verify export formats
      const formats = ['Beautiful Poem', 'Clean HTML', 'Markdown'];
      for (const format of formats) {
        const formatOption = page.locator(`text=${format}`);
        const isVisible = await formatOption.isVisible();
        console.log(`  ${format}: ${isVisible ? '✓' : '✗'}`);
      }
    }
    
    // Step 7: Final verification - all stages completed
    console.log('\nStep 7: Final verification');
    
    // Check that we have a complete poem with image
    const stages = [
      { name: 'poem-topic', label: 'Poem Topic' },
      { name: 'poem-generation', label: 'Poem Generation' },
      { name: 'image-briefing', label: 'Image Briefing' },
      { name: 'generate-poem-image', label: 'Image Generation' },
      { name: 'generate-html-preview', label: 'HTML Generation' }
    ];
    
    for (const stage of stages) {
      const stageCard = page.locator(`[data-testid="stage-card-${stage.name}"]`);
      const exists = await stageCard.count() > 0;
      console.log(`  ${stage.label}: ${exists ? '✓' : '✗'}`);
    }
    
    console.log('\n✅ Complete poem workflow test passed!');
    console.log('Successfully generated a poem with images and HTML export.');
  });

  test('should handle image selection and switching', async ({ page }) => {
    // Quick poem generation
    await page.locator('textarea').first().fill('Rainbow after the storm');
    await page.locator('#process-stage-poem-topic').click();
    
    // Wait for poem
    await page.waitForSelector('text=Poem Title', { timeout: 60000 });
    
    // Request multiple images
    await page.waitForSelector('text=Image Customization', { timeout: 10000 });
    
    // Try to select 4 images if the option exists
    const numberSelect = page.locator('select').filter({ hasText: /\d+ Images?/ });
    if (await numberSelect.count() > 0) {
      await numberSelect.selectOption('4');
    }
    
    await page.locator('#process-stage-image-briefing').click();
    
    // Wait for images
    await page.waitForSelector('[data-testid="stage-card-generate-poem-image"] img', {
      timeout: 120000
    });
    
    // Check for multiple images (thumbnails)
    const thumbnails = page.locator('[data-testid="stage-card-generate-poem-image"] button img');
    const thumbnailCount = await thumbnails.count();
    
    if (thumbnailCount > 1) {
      console.log(`Found ${thumbnailCount} image thumbnails`);
      
      // Get initial main image src
      const mainImage = page.locator('[data-testid="stage-card-generate-poem-image"] img').first();
      const initialSrc = await mainImage.getAttribute('src');
      
      // Click on second thumbnail
      await thumbnails.nth(1).click();
      await page.waitForTimeout(500);
      
      // Verify main image changed
      const newSrc = await mainImage.getAttribute('src');
      expect(newSrc).not.toBe(initialSrc);
      
      console.log('✓ Image selection working correctly');
    }
  });

  test('should gracefully handle errors in image generation', async ({ page }) => {
    // Enter poem topic
    await page.locator('textarea').first().fill('Test poem for error handling');
    await page.locator('#process-stage-poem-topic').click();
    
    // Wait for poem
    await page.waitForSelector('text=Poem Title', { timeout: 60000 });
    
    // Fill image form with edge case
    await page.waitForSelector('text=Image Customization', { timeout: 10000 });
    
    // Add very long instructions to test limits
    const longInstructions = 'Very detailed instructions '.repeat(50);
    await page.locator('textarea[placeholder*="optional"]').fill(longInstructions);
    
    await page.locator('#process-stage-image-briefing').click();
    
    // Wait for either success or error
    const result = await Promise.race([
      page.waitForSelector('[data-testid="stage-card-generate-poem-image"] img', {
        timeout: 120000
      }).then(() => 'success'),
      page.waitForSelector('[data-testid="stage-card-generate-poem-image"] .text-red-500, [data-testid="stage-card-generate-poem-image"] .text-destructive', {
        timeout: 120000
      }).then(() => 'error')
    ]);
    
    if (result === 'error') {
      console.log('✓ Error handled gracefully');
      // Verify error message is displayed
      const errorMessage = await page.locator('[data-testid="stage-card-generate-poem-image"] .text-red-500, [data-testid="stage-card-generate-poem-image"] .text-destructive').textContent();
      expect(errorMessage).toBeTruthy();
    } else {
      console.log('✓ Image generated successfully despite edge case');
    }
  });
});